[
  {
    "name": "ExternalVideo",
    "category": "components",
    "isVisualComponent": true,
    "related": [
      {
        "name": "MediaFile",
        "type": "component",
        "url": "api/hydrogen/components/product-variant/mediafile"
      }
    ],
    "description": "The `ExternalVideo` component renders an embedded video for the Storefront API's [ExternalVideo object](https://shopify.dev/api/storefront/reference/products/externalvideo).",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "import {ExternalVideo} from '@shopify/hydrogen-react';\n\nexport default function MyProductVideo({products}) {\n  const firstMediaElement = products.nodes[0].media.nodes[0];\n\n  if (firstMediaElement.__typename === 'ExternalVideo') {\n    return <ExternalVideo data={firstMediaElement} />;\n  }\n}\n",
            "language": "jsx"
          },
          {
            "title": "TypeScript",
            "code": "import {ExternalVideo} from '@shopify/hydrogen-react';\nimport type {ProductConnection} from '@shopify/hydrogen-react/storefront-api-types';\n\nexport default function MyProductVideo({\n  products,\n}: {\n  products: ProductConnection;\n}) {\n  const firstMediaElement = products.nodes[0].media.nodes[0];\n  if (firstMediaElement.__typename === 'ExternalVideo') {\n    return <ExternalVideo data={firstMediaElement} />;\n  }\n}\n",
            "language": "tsx"
          }
        ],
        "title": "ExternalVideo example"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "Takes in the same props as a native `<iframe>` element, except for `src`.",
        "type": "ExternalVideoProps",
        "typeDefinitions": {
          "ExternalVideoProps": {
            "filePath": "/ExternalVideo.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ExternalVideoProps",
            "value": "Omit<JSX.IntrinsicElements['iframe'], 'src'> & BaseProps",
            "description": ""
          },
          "BaseProps": {
            "filePath": "/ExternalVideo.tsx",
            "name": "BaseProps",
            "description": "",
            "members": [
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<ExternalVideo, { recurseIntoArrays: true; }>",
                "description": "An object with fields that correspond to the Storefront API's [ExternalVideo object](https://shopify.dev/api/storefront/reference/products/externalvideo)."
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "options",
                "value": "YouTube | Vimeo",
                "description": "An object containing the options available for either\n[YouTube](https://developers.google.com/youtube/player_parameters#Parameters) or\n[Vimeo](https://vimeo.zendesk.com/hc/en-us/articles/360001494447-Using-Player-Parameters).",
                "isOptional": true
              }
            ],
            "value": "interface BaseProps {\n  /**\n   * An object with fields that correspond to the Storefront API's [ExternalVideo object](https://shopify.dev/api/storefront/reference/products/externalvideo).\n   */\n  data: PartialDeep<ExternalVideoType, {recurseIntoArrays: true}>;\n  /** An object containing the options available for either\n   * [YouTube](https://developers.google.com/youtube/player_parameters#Parameters) or\n   * [Vimeo](https://vimeo.zendesk.com/hc/en-us/articles/360001494447-Using-Player-Parameters).\n   */\n  options?: YouTube | Vimeo;\n}"
          },
          "YouTube": {
            "filePath": "/ExternalVideo.tsx",
            "name": "YouTube",
            "description": "",
            "members": [
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "autoplay",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "cc_lang_pref",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "cc_load_policy",
                "value": "1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "color",
                "value": "\"red\" | \"white\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "controls",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "disablekb",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "enablejsapi",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "end",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "fs",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "hl",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "iv_load_policy",
                "value": "1 | 3",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "list",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "list_type",
                "value": "\"playlist\" | \"user_uploads\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "loop",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "modest_branding",
                "value": "1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "origin",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "playlist",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "plays_inline",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "rel",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "start",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "widget_referrer",
                "value": "string",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "interface YouTube {\n  autoplay?: 0 | 1;\n  cc_lang_pref?: string;\n  cc_load_policy?: 1;\n  color?: 'red' | 'white';\n  controls?: 0 | 1;\n  disablekb?: 0 | 1;\n  enablejsapi?: 0 | 1;\n  end?: number;\n  fs?: 0 | 1;\n  hl?: string;\n  iv_load_policy?: 1 | 3;\n  list?: string;\n  list_type?: 'playlist' | 'user_uploads';\n  loop?: 0 | 1;\n  modest_branding?: 1;\n  origin?: string;\n  playlist?: string;\n  plays_inline?: 0 | 1;\n  rel?: 0 | 1;\n  start?: number;\n  widget_referrer?: string;\n}"
          },
          "Vimeo": {
            "filePath": "/ExternalVideo.tsx",
            "name": "Vimeo",
            "description": "",
            "members": [
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "autopause",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "autoplay",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "background",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "byline",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "color",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "controls",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "dnt",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "loop",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "muted",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "pip",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "playsinline",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "portrait",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "quality",
                "value": "\"240p\" | \"360p\" | \"540p\" | \"720p\" | \"1080p\" | \"2k\" | \"4k\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "speed",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "#t",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "texttrack",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "transparent",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "interface Vimeo {\n  autopause?: VimeoBoolean;\n  autoplay?: VimeoBoolean;\n  background?: VimeoBoolean;\n  byline?: VimeoBoolean;\n  color?: string;\n  controls?: VimeoBoolean;\n  dnt?: VimeoBoolean;\n  loop?: VimeoBoolean;\n  muted?: VimeoBoolean;\n  pip?: VimeoBoolean;\n  playsinline?: VimeoBoolean;\n  portrait?: VimeoBoolean;\n  quality?: '240p' | '360p' | '540p' | '720p' | '1080p' | '2k' | '4k';\n  speed?: VimeoBoolean;\n  '#t'?: string;\n  texttrack?: string;\n  title?: VimeoBoolean;\n  transparent?: VimeoBoolean;\n}"
          },
          "VimeoBoolean": {
            "filePath": "/ExternalVideo.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "VimeoBoolean",
            "value": "0 | 1 | boolean",
            "description": ""
          }
        }
      }
    ]
  },
  {
    "name": "Image",
    "category": "components",
    "isVisualComponent": true,
    "related": [
      {
        "name": "MediaFile",
        "type": "component",
        "url": "api/hydrogen/components/product-variant/mediafile"
      }
    ],
    "description": "The `Image` component renders an image for the Storefront API's\n[Image object](https://shopify.dev/api/storefront/reference/common-objects/image) by using the `data` prop. You can [customize this component](https://shopify.dev/api/hydrogen/components#customizing-hydrogen-components) using passthrough props.\n\nAn image's width and height are determined using the following priority list:\n1. The width and height values for the `loaderOptions` prop\n2. The width and height values for bare props\n3. The width and height values for the `data` prop\n\nIf only one of `width` or `height` are defined, then the other will attempt to be calculated based on the image's aspect ratio,\nprovided that both `data.width` and `data.height` are available. If `data.width` and `data.height` aren't available, then the aspect ratio cannot be determined and the missing value will remain as `null`",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "import {Image} from '@shopify/hydrogen-react';\n\nexport default function ProductImage({product}) {\n  const image = product.featuredImage;\n\n  if (!image) {\n    return null;\n  }\n\n  return <Image data={image} />;\n}\n",
            "language": "jsx"
          },
          {
            "title": "TypeScript",
            "code": "import {Image} from '@shopify/hydrogen-react';\nimport type {Product} from '@shopify/hydrogen-react/storefront-api-types';\n\nexport default function ProductImage({product}: {product: Product}) {\n  const image = product.featuredImage;\n\n  if (!image) {\n    return null;\n  }\n\n  return <Image data={image} />;\n}\n",
            "language": "tsx"
          }
        ],
        "title": "Example code"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "",
        "type": "ShopifyImageProps",
        "typeDefinitions": {
          "ShopifyImageProps": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopifyImageProps",
            "value": "Omit<HtmlImageProps, 'src'> & ShopifyImageBaseProps",
            "description": ""
          },
          "HtmlImageProps": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "HtmlImageProps",
            "value": "React.ImgHTMLAttributes<HTMLImageElement>",
            "description": ""
          },
          "ShopifyImageBaseProps": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopifyImageBaseProps",
            "value": "{\n  /** An object with fields that correspond to the Storefront API's\n   * [Image object](https://shopify.dev/api/storefront/reference/common-objects/image).\n   * The `data` prop is required.\n   */\n  data: PartialDeep<ImageType, {recurseIntoArrays: true}>;\n  /** A custom function that generates the image URL. Parameters passed in\n   * are `ShopifyLoaderParams`\n   */\n  loader?: (params: ShopifyLoaderParams) => string;\n  /** An object of `loader` function options. For example, if the `loader` function\n   * requires a `scale` option, then the value can be a property of the\n   * `loaderOptions` object (for example, `{scale: 2}`). The object shape is `ShopifyLoaderOptions`.\n   */\n  loaderOptions?: ShopifyLoaderOptions;\n  /**\n   * `src` isn't used, and should instead be passed as part of the `data` object\n   */\n  src?: never;\n  /**\n   * An array of pixel widths to overwrite the default generated srcset. For example, `[300, 600, 800]`.\n   */\n  widths?: (HtmlImageProps['width'] | ImageType['width'])[];\n}",
            "description": "",
            "members": [
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<Image, { recurseIntoArrays: true; }>",
                "description": "An object with fields that correspond to the Storefront API's\n[Image object](https://shopify.dev/api/storefront/reference/common-objects/image).\nThe `data` prop is required."
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "loader",
                "value": "(params: Simplify<ShopifyLoaderOptions & ImageSrc>) => string",
                "description": "A custom function that generates the image URL. Parameters passed in\nare `ShopifyLoaderParams`",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "loaderOptions",
                "value": "ShopifyLoaderOptions",
                "description": "An object of `loader` function options. For example, if the `loader` function\nrequires a `scale` option, then the value can be a property of the\n`loaderOptions` object (for example, `{scale: 2}`). The object shape is `ShopifyLoaderOptions`.",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "src",
                "value": "never",
                "description": "`src` isn't used, and should instead be passed as part of the `data` object",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "widths",
                "value": "(string | number)[]",
                "description": "An array of pixel widths to overwrite the default generated srcset. For example, `[300, 600, 800]`.",
                "isOptional": true
              }
            ]
          },
          "ShopifyLoaderOptions": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopifyLoaderOptions",
            "value": "{\n  crop?: 'top' | 'bottom' | 'left' | 'right' | 'center';\n  scale?: 2 | 3;\n  width?: HtmlImageProps['width'] | ImageType['width'];\n  height?: HtmlImageProps['height'] | ImageType['height'];\n}",
            "description": "",
            "members": [
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "crop",
                "value": "\"top\" | \"bottom\" | \"left\" | \"right\" | \"center\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "scale",
                "value": "3 | 2",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "width",
                "value": "string | number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "height",
                "value": "string | number",
                "description": "",
                "isOptional": true
              }
            ]
          },
          "ImageSrc": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ImageSrc",
            "value": "{\n  src: ImageType['url'];\n}",
            "description": "",
            "members": [
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "src",
                "value": "string",
                "description": ""
              }
            ]
          }
        }
      }
    ]
  },
  {
    "name": "MediaFile",
    "category": "components",
    "isVisualComponent": true,
    "related": [
      {
        "name": "Image",
        "type": "component",
        "url": "api/hydrogen/components/primitive/image"
      },
      {
        "name": "Video",
        "type": "component",
        "url": "api/hydrogen/components/primitive/video"
      },
      {
        "name": "ExternalVideo",
        "type": "component",
        "url": "api/hydrogen/components/primitive/externalvideo"
      },
      {
        "name": "ModelViewer",
        "type": "component",
        "url": "api/hydrogen/components/primitive/modelviewer"
      }
    ],
    "description": "The `MediaFile` component renders the media for the Storefront API's\n[Media object](https://shopify.dev/api/storefront/reference/products/media). It renders an `Image `Video`, an `ExternalVideo`, or a `ModelViewer` depending on the `__typename` of the `data` prop.",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "import {MediaFile} from '@shopify/hydrogen-react';\n\nexport function ProductsMediaFiles({products}) {\n  return (\n    <ul>\n      {products.nodes.map((product) => {\n        return <MediaFile data={product.media.nodes[0]} key={product.id} />;\n      })}\n    </ul>\n  );\n}\n",
            "language": "jsx"
          },
          {
            "title": "TypeScript",
            "code": "import {MediaFile} from '@shopify/hydrogen-react';\nimport type {ProductConnection} from '@shopify/hydrogen-react/storefront-api-types';\n\nexport function ProductsMediaFiles({products}: {products: ProductConnection}) {\n  return (\n    <ul>\n      {products.nodes.map((product) => {\n        return <MediaFile data={product.media.nodes[0]} key={product.id} />;\n      })}\n    </ul>\n  );\n}\n",
            "language": "tsx"
          }
        ],
        "title": "Example code"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "MediaFile renders an `Image`, `Video`, `ExternalVideo`, or `ModelViewer` component. Use the `mediaOptions` prop to customize the props sent to each of these components.",
        "type": "MediaFileProps",
        "typeDefinitions": {
          "MediaFileProps": {
            "filePath": "/MediaFile.tsx",
            "name": "MediaFileProps",
            "description": "",
            "members": [
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<ExternalVideo, { recurseIntoArrays: true; }> | PartialObjectDeep<MediaImage, { recurseIntoArrays: true; }> | PartialObjectDeep<Model3d, { recurseIntoArrays: true; }> | PartialObjectDeep<Video, { recurseIntoArrays: true; }>",
                "description": "An object with fields that correspond to the Storefront API's [Media object](https://shopify.dev/api/storefront/reference/products/media)."
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "mediaOptions",
                "value": "MediaOptions",
                "description": "The options for the `Image`, `Video`, `ExternalVideo`, or `ModelViewer` components.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "defaultChecked",
                "value": "boolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "defaultValue",
                "value": "string | number | readonly string[]",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "suppressContentEditableWarning",
                "value": "boolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "suppressHydrationWarning",
                "value": "boolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "accessKey",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "className",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "contentEditable",
                "value": "Booleanish | \"inherit\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "contextMenu",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "dir",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "draggable",
                "value": "Booleanish",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "hidden",
                "value": "boolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "lang",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "nonce",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "placeholder",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "slot",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "spellCheck",
                "value": "Booleanish",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "style",
                "value": "CSSProperties",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "tabIndex",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "translate",
                "value": "\"yes\" | \"no\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "radioGroup",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "role",
                "value": "AriaRole",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "about",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "datatype",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "inlist",
                "value": "any",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "prefix",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "property",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "resource",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "typeof",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "vocab",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "autoCapitalize",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "autoCorrect",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "autoSave",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "color",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "itemProp",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "itemScope",
                "value": "boolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "itemType",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "itemID",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "itemRef",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "results",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "security",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "unselectable",
                "value": "\"on\" | \"off\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "inputMode",
                "value": "\"url\" | \"none\" | \"search\" | \"text\" | \"tel\" | \"email\" | \"numeric\" | \"decimal\"",
                "description": "Hints at the type of data that might be entered by the user while editing the element or its contents",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "is",
                "value": "string",
                "description": "Specify that a standard HTML element should behave like a defined custom built-in element",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-activedescendant",
                "value": "string",
                "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-atomic",
                "value": "Booleanish",
                "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-autocomplete",
                "value": "\"list\" | \"none\" | \"inline\" | \"both\"",
                "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-busy",
                "value": "Booleanish",
                "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-checked",
                "value": "boolean | \"true\" | \"false\" | \"mixed\"",
                "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-colcount",
                "value": "number",
                "description": "Defines the total number of columns in a table, grid, or treegrid.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-colindex",
                "value": "number",
                "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-colspan",
                "value": "number",
                "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-controls",
                "value": "string",
                "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-current",
                "value": "boolean | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\"",
                "description": "Indicates the element that represents the current item within a container or set of related elements.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-describedby",
                "value": "string",
                "description": "Identifies the element (or elements) that describes the object.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-details",
                "value": "string",
                "description": "Identifies the element that provides a detailed, extended description for the object.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-disabled",
                "value": "Booleanish",
                "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-dropeffect",
                "value": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"",
                "description": "Indicates what functions can be performed when a dragged object is released on the drop target.",
                "isOptional": true,
                "deprecationMessage": "in ARIA 1.1"
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-errormessage",
                "value": "string",
                "description": "Identifies the element that provides an error message for the object.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-expanded",
                "value": "Booleanish",
                "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-flowto",
                "value": "string",
                "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-grabbed",
                "value": "Booleanish",
                "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
                "isOptional": true,
                "deprecationMessage": "in ARIA 1.1"
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-haspopup",
                "value": "boolean | \"true\" | \"false\" | \"dialog\" | \"grid\" | \"listbox\" | \"menu\" | \"tree\"",
                "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-hidden",
                "value": "Booleanish",
                "description": "Indicates whether the element is exposed to an accessibility API.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-invalid",
                "value": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"",
                "description": "Indicates the entered value does not conform to the format expected by the application.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-keyshortcuts",
                "value": "string",
                "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-label",
                "value": "string",
                "description": "Defines a string value that labels the current element.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-labelledby",
                "value": "string",
                "description": "Identifies the element (or elements) that labels the current element.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-level",
                "value": "number",
                "description": "Defines the hierarchical level of an element within a structure.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-live",
                "value": "\"off\" | \"assertive\" | \"polite\"",
                "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-modal",
                "value": "Booleanish",
                "description": "Indicates whether an element is modal when displayed.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-multiline",
                "value": "Booleanish",
                "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-multiselectable",
                "value": "Booleanish",
                "description": "Indicates that the user may select more than one item from the current selectable descendants.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-orientation",
                "value": "\"horizontal\" | \"vertical\"",
                "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-owns",
                "value": "string",
                "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-placeholder",
                "value": "string",
                "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-posinset",
                "value": "number",
                "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-pressed",
                "value": "boolean | \"true\" | \"false\" | \"mixed\"",
                "description": "Indicates the current \"pressed\" state of toggle buttons.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-readonly",
                "value": "Booleanish",
                "description": "Indicates that the element is not editable, but is otherwise operable.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-relevant",
                "value": "\"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
                "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-required",
                "value": "Booleanish",
                "description": "Indicates that user input is required on the element before a form may be submitted.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-roledescription",
                "value": "string",
                "description": "Defines a human-readable, author-localized description for the role of an element.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-rowcount",
                "value": "number",
                "description": "Defines the total number of rows in a table, grid, or treegrid.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-rowindex",
                "value": "number",
                "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-rowspan",
                "value": "number",
                "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-selected",
                "value": "Booleanish",
                "description": "Indicates the current \"selected\" state of various widgets.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-setsize",
                "value": "number",
                "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-sort",
                "value": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
                "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-valuemax",
                "value": "number",
                "description": "Defines the maximum allowed value for a range widget.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-valuemin",
                "value": "number",
                "description": "Defines the minimum allowed value for a range widget.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-valuenow",
                "value": "number",
                "description": "Defines the current value for a range widget.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "aria-valuetext",
                "value": "string",
                "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "children",
                "value": "ReactNode",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "dangerouslySetInnerHTML",
                "value": "{ __html: string; }",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCopy",
                "value": "ClipboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCopyCapture",
                "value": "ClipboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCut",
                "value": "ClipboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCutCapture",
                "value": "ClipboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPaste",
                "value": "ClipboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPasteCapture",
                "value": "ClipboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCompositionEnd",
                "value": "CompositionEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCompositionEndCapture",
                "value": "CompositionEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCompositionStart",
                "value": "CompositionEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCompositionStartCapture",
                "value": "CompositionEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCompositionUpdate",
                "value": "CompositionEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCompositionUpdateCapture",
                "value": "CompositionEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onFocus",
                "value": "FocusEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onFocusCapture",
                "value": "FocusEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onBlur",
                "value": "FocusEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onBlurCapture",
                "value": "FocusEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onChange",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onChangeCapture",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onBeforeInput",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onBeforeInputCapture",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onInput",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onInputCapture",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onReset",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onResetCapture",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSubmit",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSubmitCapture",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onInvalid",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onInvalidCapture",
                "value": "FormEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLoad",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLoadCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onError",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onErrorCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onKeyDown",
                "value": "KeyboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onKeyDownCapture",
                "value": "KeyboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onKeyPress",
                "value": "KeyboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true,
                "deprecationMessage": "Deprecated"
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onKeyPressCapture",
                "value": "KeyboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true,
                "deprecationMessage": "Deprecated"
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onKeyUp",
                "value": "KeyboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onKeyUpCapture",
                "value": "KeyboardEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onAbort",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onAbortCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCanPlay",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCanPlayCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCanPlayThrough",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCanPlayThroughCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDurationChange",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDurationChangeCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onEmptied",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onEmptiedCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onEncrypted",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onEncryptedCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onEnded",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onEndedCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLoadedData",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLoadedDataCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLoadedMetadata",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLoadedMetadataCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLoadStart",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLoadStartCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPause",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPauseCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPlay",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPlayCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPlaying",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPlayingCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onProgress",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onProgressCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onRateChange",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onRateChangeCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSeeked",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSeekedCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSeeking",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSeekingCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onStalled",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onStalledCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSuspend",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSuspendCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTimeUpdate",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTimeUpdateCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onVolumeChange",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onVolumeChangeCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onWaiting",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onWaitingCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onAuxClick",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onAuxClickCapture",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onClick",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onClickCapture",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onContextMenu",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onContextMenuCapture",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDoubleClick",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDoubleClickCapture",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDrag",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragCapture",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragEnd",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragEndCapture",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragEnter",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragEnterCapture",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragExit",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragExitCapture",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragLeave",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragLeaveCapture",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragOver",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragOverCapture",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragStart",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDragStartCapture",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDrop",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onDropCapture",
                "value": "DragEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseDown",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseDownCapture",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseEnter",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseLeave",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseMove",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseMoveCapture",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseOut",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseOutCapture",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseOver",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseOverCapture",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseUp",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onMouseUpCapture",
                "value": "MouseEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSelect",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSelectCapture",
                "value": "ReactEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTouchCancel",
                "value": "TouchEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTouchCancelCapture",
                "value": "TouchEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTouchEnd",
                "value": "TouchEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTouchEndCapture",
                "value": "TouchEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTouchMove",
                "value": "TouchEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTouchMoveCapture",
                "value": "TouchEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTouchStart",
                "value": "TouchEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTouchStartCapture",
                "value": "TouchEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerDown",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerDownCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerMove",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerMoveCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerUp",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerUpCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerCancel",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerCancelCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerEnter",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerEnterCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerLeave",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerLeaveCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerOver",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerOverCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerOut",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPointerOutCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onGotPointerCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onGotPointerCaptureCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLostPointerCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLostPointerCaptureCapture",
                "value": "PointerEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onScroll",
                "value": "UIEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onScrollCapture",
                "value": "UIEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onWheel",
                "value": "WheelEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onWheelCapture",
                "value": "WheelEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onAnimationStart",
                "value": "AnimationEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onAnimationStartCapture",
                "value": "AnimationEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onAnimationEnd",
                "value": "AnimationEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onAnimationEndCapture",
                "value": "AnimationEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onAnimationIteration",
                "value": "AnimationEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onAnimationIterationCapture",
                "value": "AnimationEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTransitionEnd",
                "value": "TransitionEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onTransitionEndCapture",
                "value": "TransitionEventHandler<HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | (AnnotationInterface & SceneGraphInterface & StagingInterface & EnvironmentInterface & ControlsInterface & ARInterface & LoadingInterface & AnimationInterface & ModelViewerElementBase)>",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "export interface MediaFileProps extends BaseProps {\n  /** An object with fields that correspond to the Storefront API's [Media object](https://shopify.dev/api/storefront/reference/products/media). */\n  data: PartialDeep<MediaEdgeType['node'], {recurseIntoArrays: true}>;\n  /** The options for the `Image`, `Video`, `ExternalVideo`, or `ModelViewer` components. */\n  mediaOptions?: MediaOptions;\n}"
          },
          "MediaOptions": {
            "filePath": "/MediaFile.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MediaOptions",
            "value": "{\n  /** Props that will only apply when an `<Image />` is rendered */\n  image?: Omit<ShopifyImageProps, 'data'>;\n  /** Props that will only apply when a `<Video />` is rendered */\n  video?: Omit<React.ComponentProps<typeof Video>, 'data'>;\n  /** Props that will only apply when an `<ExternalVideo />` is rendered */\n  externalVideo?: Omit<\n    React.ComponentProps<typeof ExternalVideo>['options'],\n    'data'\n  >;\n  /** Props that will only apply when a `<ModelViewer />` is rendered */\n  modelViewer?: Omit<typeof ModelViewer, 'data'>;\n}",
            "description": "",
            "members": [
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "Omit<ShopifyImageProps, \"data\">",
                "description": "Props that will only apply when an `<Image />` is rendered",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "video",
                "value": "Omit<ClassAttributes<HTMLVideoElement> & VideoHTMLAttributes<HTMLVideoElement> & VideoProps, \"data\">",
                "description": "Props that will only apply when a `<Video />` is rendered",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "externalVideo",
                "value": "Omit<YouTube | Vimeo, \"data\">",
                "description": "Props that will only apply when an `<ExternalVideo />` is rendered",
                "isOptional": true
              },
              {
                "filePath": "/MediaFile.tsx",
                "syntaxKind": "PropertySignature",
                "name": "modelViewer",
                "value": "Omit<(props: ModelViewerProps) => Element, \"data\">",
                "description": "Props that will only apply when a `<ModelViewer />` is rendered",
                "isOptional": true
              }
            ]
          },
          "ShopifyImageProps": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopifyImageProps",
            "value": "Omit<HtmlImageProps, 'src'> & ShopifyImageBaseProps",
            "description": ""
          },
          "HtmlImageProps": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "HtmlImageProps",
            "value": "React.ImgHTMLAttributes<HTMLImageElement>",
            "description": ""
          },
          "ShopifyImageBaseProps": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopifyImageBaseProps",
            "value": "{\n  /** An object with fields that correspond to the Storefront API's\n   * [Image object](https://shopify.dev/api/storefront/reference/common-objects/image).\n   * The `data` prop is required.\n   */\n  data: PartialDeep<ImageType, {recurseIntoArrays: true}>;\n  /** A custom function that generates the image URL. Parameters passed in\n   * are `ShopifyLoaderParams`\n   */\n  loader?: (params: ShopifyLoaderParams) => string;\n  /** An object of `loader` function options. For example, if the `loader` function\n   * requires a `scale` option, then the value can be a property of the\n   * `loaderOptions` object (for example, `{scale: 2}`). The object shape is `ShopifyLoaderOptions`.\n   */\n  loaderOptions?: ShopifyLoaderOptions;\n  /**\n   * `src` isn't used, and should instead be passed as part of the `data` object\n   */\n  src?: never;\n  /**\n   * An array of pixel widths to overwrite the default generated srcset. For example, `[300, 600, 800]`.\n   */\n  widths?: (HtmlImageProps['width'] | ImageType['width'])[];\n}",
            "description": "",
            "members": [
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<Image, { recurseIntoArrays: true; }>",
                "description": "An object with fields that correspond to the Storefront API's\n[Image object](https://shopify.dev/api/storefront/reference/common-objects/image).\nThe `data` prop is required."
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "loader",
                "value": "(params: Simplify<ShopifyLoaderOptions & ImageSrc>) => string",
                "description": "A custom function that generates the image URL. Parameters passed in\nare `ShopifyLoaderParams`",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "loaderOptions",
                "value": "ShopifyLoaderOptions",
                "description": "An object of `loader` function options. For example, if the `loader` function\nrequires a `scale` option, then the value can be a property of the\n`loaderOptions` object (for example, `{scale: 2}`). The object shape is `ShopifyLoaderOptions`.",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "src",
                "value": "never",
                "description": "`src` isn't used, and should instead be passed as part of the `data` object",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "widths",
                "value": "(string | number)[]",
                "description": "An array of pixel widths to overwrite the default generated srcset. For example, `[300, 600, 800]`.",
                "isOptional": true
              }
            ]
          },
          "ShopifyLoaderOptions": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopifyLoaderOptions",
            "value": "{\n  crop?: 'top' | 'bottom' | 'left' | 'right' | 'center';\n  scale?: 2 | 3;\n  width?: HtmlImageProps['width'] | ImageType['width'];\n  height?: HtmlImageProps['height'] | ImageType['height'];\n}",
            "description": "",
            "members": [
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "crop",
                "value": "\"top\" | \"bottom\" | \"left\" | \"right\" | \"center\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "scale",
                "value": "3 | 2",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "width",
                "value": "string | number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "height",
                "value": "string | number",
                "description": "",
                "isOptional": true
              }
            ]
          },
          "ImageSrc": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ImageSrc",
            "value": "{\n  src: ImageType['url'];\n}",
            "description": "",
            "members": [
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "src",
                "value": "string",
                "description": ""
              }
            ]
          },
          "VideoProps": {
            "filePath": "/Video.tsx",
            "name": "VideoProps",
            "description": "",
            "members": [
              {
                "filePath": "/Video.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<Video, { recurseIntoArrays: true; }>",
                "description": "An object with fields that correspond to the Storefront API's [Video object](https://shopify.dev/api/storefront/latest/objects/video)."
              },
              {
                "filePath": "/Video.tsx",
                "syntaxKind": "PropertySignature",
                "name": "previewImageOptions",
                "value": "Simplify<ShopifyLoaderOptions & ImageSrc>",
                "description": "An object of image size options for the video's `previewImage`. Uses `shopifyImageLoader` to generate the `poster` URL.",
                "isOptional": true
              },
              {
                "filePath": "/Video.tsx",
                "syntaxKind": "PropertySignature",
                "name": "sourceProps",
                "value": "HTMLAttributes<HTMLSourceElement> & { 'data-testid'?: string; }",
                "description": "Props that will be passed to the `video` element's `source` children elements.",
                "isOptional": true
              }
            ],
            "value": "export interface VideoProps {\n  /** An object with fields that correspond to the Storefront API's [Video object](https://shopify.dev/api/storefront/latest/objects/video). */\n  data: PartialDeep<VideoType, {recurseIntoArrays: true}>;\n  /** An object of image size options for the video's `previewImage`. Uses `shopifyImageLoader` to generate the `poster` URL. */\n  previewImageOptions?: Parameters<typeof shopifyImageLoader>[0];\n  /** Props that will be passed to the `video` element's `source` children elements. */\n  sourceProps?: HTMLAttributes<HTMLSourceElement> & {\n    'data-testid'?: string;\n  };\n}"
          },
          "YouTube": {
            "filePath": "/ExternalVideo.tsx",
            "name": "YouTube",
            "description": "",
            "members": [
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "autoplay",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "cc_lang_pref",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "cc_load_policy",
                "value": "1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "color",
                "value": "\"red\" | \"white\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "controls",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "disablekb",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "enablejsapi",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "end",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "fs",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "hl",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "iv_load_policy",
                "value": "1 | 3",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "list",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "list_type",
                "value": "\"playlist\" | \"user_uploads\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "loop",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "modest_branding",
                "value": "1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "origin",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "playlist",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "plays_inline",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "rel",
                "value": "0 | 1",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "start",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "widget_referrer",
                "value": "string",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "interface YouTube {\n  autoplay?: 0 | 1;\n  cc_lang_pref?: string;\n  cc_load_policy?: 1;\n  color?: 'red' | 'white';\n  controls?: 0 | 1;\n  disablekb?: 0 | 1;\n  enablejsapi?: 0 | 1;\n  end?: number;\n  fs?: 0 | 1;\n  hl?: string;\n  iv_load_policy?: 1 | 3;\n  list?: string;\n  list_type?: 'playlist' | 'user_uploads';\n  loop?: 0 | 1;\n  modest_branding?: 1;\n  origin?: string;\n  playlist?: string;\n  plays_inline?: 0 | 1;\n  rel?: 0 | 1;\n  start?: number;\n  widget_referrer?: string;\n}"
          },
          "Vimeo": {
            "filePath": "/ExternalVideo.tsx",
            "name": "Vimeo",
            "description": "",
            "members": [
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "autopause",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "autoplay",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "background",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "byline",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "color",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "controls",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "dnt",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "loop",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "muted",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "pip",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "playsinline",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "portrait",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "quality",
                "value": "\"240p\" | \"360p\" | \"540p\" | \"720p\" | \"1080p\" | \"2k\" | \"4k\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "speed",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "#t",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "texttrack",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ExternalVideo.tsx",
                "syntaxKind": "PropertySignature",
                "name": "transparent",
                "value": "VimeoBoolean",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "interface Vimeo {\n  autopause?: VimeoBoolean;\n  autoplay?: VimeoBoolean;\n  background?: VimeoBoolean;\n  byline?: VimeoBoolean;\n  color?: string;\n  controls?: VimeoBoolean;\n  dnt?: VimeoBoolean;\n  loop?: VimeoBoolean;\n  muted?: VimeoBoolean;\n  pip?: VimeoBoolean;\n  playsinline?: VimeoBoolean;\n  portrait?: VimeoBoolean;\n  quality?: '240p' | '360p' | '540p' | '720p' | '1080p' | '2k' | '4k';\n  speed?: VimeoBoolean;\n  '#t'?: string;\n  texttrack?: string;\n  title?: VimeoBoolean;\n  transparent?: VimeoBoolean;\n}"
          },
          "VimeoBoolean": {
            "filePath": "/ExternalVideo.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "VimeoBoolean",
            "value": "0 | 1 | boolean",
            "description": ""
          },
          "ModelViewerProps": {
            "filePath": "/ModelViewer.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ModelViewerProps",
            "value": "Omit<\n  PartialDeep<JSX.IntrinsicElements['model-viewer'], {recurseIntoArrays: true}>,\n  'src'\n> & ModelViewerBaseProps",
            "description": ""
          },
          "ModelViewerBaseProps": {
            "filePath": "/ModelViewer.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ModelViewerBaseProps",
            "value": "{\n  /** An object with fields that correspond to the Storefront API's [Model3D object](https://shopify.dev/api/storefront/latest/objects/model3d). */\n  data: PartialDeep<Model3d, {recurseIntoArrays: true}>;\n  /** The callback to invoke when the 'error' event is triggered. Refer to [error in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-error). */\n  onError?: (event: Event) => void;\n  /** The callback to invoke when the `load` event is triggered. Refer to [load in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-load). */\n  onLoad?: (event: Event) => void;\n  /** The callback to invoke when the 'preload' event is triggered. Refer to [preload in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-preload). */\n  onPreload?: (event: Event) => void;\n  /** The callback to invoke when the 'model-visibility' event is triggered. Refer to [model-visibility in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-modelVisibility). */\n  onModelVisibility?: (event: Event) => void;\n  /** The callback to invoke when the 'progress' event is triggered. Refer to [progress in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-progress). */\n  onProgress?: (event: Event) => void;\n  /** The callback to invoke when the 'ar-status' event is triggered. Refer to [ar-status in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-arStatus). */\n  onArStatus?: (event: Event) => void;\n  /** The callback to invoke when the 'ar-tracking' event is triggered. Refer to [ar-tracking in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-arTracking). */\n  onArTracking?: (event: Event) => void;\n  /** The callback to invoke when the 'quick-look-button-tapped' event is triggered. Refer to [quick-look-button-tapped in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-quickLookButtonTapped). */\n  onQuickLookButtonTapped?: (event: Event) => void;\n  /** The callback to invoke when the 'camera-change' event is triggered. Refer to [camera-change in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-stagingandcameras-events-cameraChange). */\n  onCameraChange?: (event: Event) => void;\n  /** The callback to invoke when the 'environment-change' event is triggered. Refer to [environment-change in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-lightingandenv-events-environmentChange).  */\n  onEnvironmentChange?: (event: Event) => void;\n  /**  The callback to invoke when the 'play' event is triggered. Refer to [play in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-animation-events-play). */\n  onPlay?: (event: Event) => void;\n  /**  The callback to invoke when the 'pause' event is triggered. Refer to [pause in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-animation-events-pause). */\n  onPause?: (event: Event) => void;\n  /** The callback to invoke when the 'scene-graph-ready' event is triggered. Refer to [scene-graph-ready in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-scenegraph-events-sceneGraphReady). */\n  onSceneGraphReady?: (event: Event) => void;\n}",
            "description": "",
            "members": [
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<Model3d, { recurseIntoArrays: true; }>",
                "description": "An object with fields that correspond to the Storefront API's [Model3D object](https://shopify.dev/api/storefront/latest/objects/model3d)."
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onError",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'error' event is triggered. Refer to [error in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-error).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLoad",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the `load` event is triggered. Refer to [load in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-load).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPreload",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'preload' event is triggered. Refer to [preload in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-preload).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onModelVisibility",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'model-visibility' event is triggered. Refer to [model-visibility in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-modelVisibility).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onProgress",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'progress' event is triggered. Refer to [progress in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-progress).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onArStatus",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'ar-status' event is triggered. Refer to [ar-status in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-arStatus).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onArTracking",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'ar-tracking' event is triggered. Refer to [ar-tracking in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-arTracking).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onQuickLookButtonTapped",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'quick-look-button-tapped' event is triggered. Refer to [quick-look-button-tapped in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-quickLookButtonTapped).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCameraChange",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'camera-change' event is triggered. Refer to [camera-change in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-stagingandcameras-events-cameraChange).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onEnvironmentChange",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'environment-change' event is triggered. Refer to [environment-change in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-lightingandenv-events-environmentChange).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPlay",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'play' event is triggered. Refer to [play in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-animation-events-play).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPause",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'pause' event is triggered. Refer to [pause in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-animation-events-pause).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSceneGraphReady",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'scene-graph-ready' event is triggered. Refer to [scene-graph-ready in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-scenegraph-events-sceneGraphReady).",
                "isOptional": true
              }
            ]
          }
        }
      }
    ]
  },
  {
    "name": "Metafield",
    "category": "components",
    "isVisualComponent": true,
    "related": [
      {
        "name": "parseMetafield",
        "type": "utility",
        "url": "api/hydrogen/utilities/parsemetafield"
      },
      {
        "name": "parseMetafieldValue",
        "type": "utility",
        "url": "api/hydrogen/utilities/parsemetafieldvalue"
      }
    ],
    "description": "The `Metafield` component renders the value of a Storefront API's\n[Metafield object](https://shopify.dev/api/storefront/reference/common-objects/metafield). Relies on the `locale` property of the `useShop()` hook, so it must be a descendent of `<ShopifyProvider/>`.\nRenders a smart default of the Metafield's `value`. For more information, refer to the [Default output](#default-output) section.",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "import {Metafield} from '@shopify/hydrogen-react';\n\nexport function Product({product}) {\n  const metafield = product.metafield;\n\n  if (!metafield) {\n    return null;\n  }\n\n  return <Metafield data={metafield} />;\n}\n",
            "language": "jsx"
          },
          {
            "title": "TypeScript",
            "code": "import {Metafield} from '@shopify/hydrogen-react';\nimport type {Product} from '@shopify/hydrogen-react/storefront-api-types';\n\nexport function Product({product}: {product: Product}) {\n  const metafield = product.metafield;\n\n  if (!metafield) {\n    return null;\n  }\n\n  return <Metafield data={metafield} />;\n}\n",
            "language": "tsx"
          }
        ],
        "title": "Example code"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "",
        "type": "MetafieldProps",
        "typeDefinitions": {
          "MetafieldProps": {
            "filePath": "/Metafield.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MetafieldProps",
            "value": "ComponentPropsWithoutRef<ComponentGeneric> & BaseProps<ComponentGeneric>",
            "description": ""
          },
          "BaseProps": {
            "filePath": "/Metafield.tsx",
            "name": "BaseProps",
            "description": "",
            "members": [
              {
                "filePath": "/Metafield.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<Metafield, { recurseIntoArrays: true; }>",
                "description": "An object with fields that correspond to the Storefront API's [Metafield object](https://shopify.dev/api/storefront/reference/common-objects/metafield)."
              },
              {
                "filePath": "/Metafield.tsx",
                "syntaxKind": "PropertySignature",
                "name": "as",
                "value": "ComponentGeneric",
                "description": "An HTML tag or React component to be rendered as the base element wrapper. The default value varies depending on [metafield.type](https://shopify.dev/apps/metafields/types).",
                "isOptional": true
              }
            ],
            "value": "interface BaseProps<ComponentGeneric extends ElementType> {\n  /** An object with fields that correspond to the Storefront API's [Metafield object](https://shopify.dev/api/storefront/reference/common-objects/metafield). */\n  data: PartialDeep<MetafieldType, {recurseIntoArrays: true}> | null;\n  /** An HTML tag or React component to be rendered as the base element wrapper. The default value varies depending on [metafield.type](https://shopify.dev/apps/metafields/types). */\n  as?: ComponentGeneric;\n}"
          }
        }
      }
    ]
  },
  {
    "name": "ModelViewer",
    "category": "components",
    "isVisualComponent": true,
    "related": [
      {
        "name": "MediaFile",
        "type": "component",
        "url": "api/hydrogen/components/primitive/mediafile"
      }
    ],
    "description": "The `ModelViewer` component renders a 3D model (with the `model-viewer` custom element) for the Storefront API's [Model3d object](https://shopify.dev/api/storefront/reference/products/model3d). The `model-viewer` custom element is lazily downloaded through a dynamically-injected `<script type='module'>` tag when the `<ModelViewer />` component is rendered. ModelViewer is using version `1.21.1` of the `@google/model-viewer` library.",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "import {ModelViewer} from '@shopify/hydrogen-react';\n\nexport default function MyProductModel({products}) {\n  const firstMediaElement = products.nodes[0].media.nodes[0];\n\n  if (firstMediaElement.__typename === 'Model3d') {\n    return <ModelViewer data={firstMediaElement} />;\n  }\n}\n",
            "language": "jsx"
          },
          {
            "title": "TypeScript",
            "code": "import {ModelViewer} from '@shopify/hydrogen-react';\nimport type {ProductConnection} from '@shopify/hydrogen-react/storefront-api-types';\n\nexport default function MyProductModel({\n  products,\n}: {\n  products: ProductConnection;\n}) {\n  const firstMediaElement = products.nodes[0].media.nodes[0];\n  if (firstMediaElement.__typename === 'Model3d') {\n    return <ModelViewer data={firstMediaElement} />;\n  }\n}\n",
            "language": "tsx"
          }
        ],
        "title": "Example code"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "",
        "type": "ModelViewerProps",
        "typeDefinitions": {
          "ModelViewerProps": {
            "filePath": "/ModelViewer.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ModelViewerProps",
            "value": "Omit<\n  PartialDeep<JSX.IntrinsicElements['model-viewer'], {recurseIntoArrays: true}>,\n  'src'\n> & ModelViewerBaseProps",
            "description": ""
          },
          "ModelViewerBaseProps": {
            "filePath": "/ModelViewer.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ModelViewerBaseProps",
            "value": "{\n  /** An object with fields that correspond to the Storefront API's [Model3D object](https://shopify.dev/api/storefront/latest/objects/model3d). */\n  data: PartialDeep<Model3d, {recurseIntoArrays: true}>;\n  /** The callback to invoke when the 'error' event is triggered. Refer to [error in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-error). */\n  onError?: (event: Event) => void;\n  /** The callback to invoke when the `load` event is triggered. Refer to [load in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-load). */\n  onLoad?: (event: Event) => void;\n  /** The callback to invoke when the 'preload' event is triggered. Refer to [preload in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-preload). */\n  onPreload?: (event: Event) => void;\n  /** The callback to invoke when the 'model-visibility' event is triggered. Refer to [model-visibility in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-modelVisibility). */\n  onModelVisibility?: (event: Event) => void;\n  /** The callback to invoke when the 'progress' event is triggered. Refer to [progress in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-progress). */\n  onProgress?: (event: Event) => void;\n  /** The callback to invoke when the 'ar-status' event is triggered. Refer to [ar-status in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-arStatus). */\n  onArStatus?: (event: Event) => void;\n  /** The callback to invoke when the 'ar-tracking' event is triggered. Refer to [ar-tracking in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-arTracking). */\n  onArTracking?: (event: Event) => void;\n  /** The callback to invoke when the 'quick-look-button-tapped' event is triggered. Refer to [quick-look-button-tapped in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-quickLookButtonTapped). */\n  onQuickLookButtonTapped?: (event: Event) => void;\n  /** The callback to invoke when the 'camera-change' event is triggered. Refer to [camera-change in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-stagingandcameras-events-cameraChange). */\n  onCameraChange?: (event: Event) => void;\n  /** The callback to invoke when the 'environment-change' event is triggered. Refer to [environment-change in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-lightingandenv-events-environmentChange).  */\n  onEnvironmentChange?: (event: Event) => void;\n  /**  The callback to invoke when the 'play' event is triggered. Refer to [play in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-animation-events-play). */\n  onPlay?: (event: Event) => void;\n  /**  The callback to invoke when the 'pause' event is triggered. Refer to [pause in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-animation-events-pause). */\n  onPause?: (event: Event) => void;\n  /** The callback to invoke when the 'scene-graph-ready' event is triggered. Refer to [scene-graph-ready in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-scenegraph-events-sceneGraphReady). */\n  onSceneGraphReady?: (event: Event) => void;\n}",
            "description": "",
            "members": [
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<Model3d, { recurseIntoArrays: true; }>",
                "description": "An object with fields that correspond to the Storefront API's [Model3D object](https://shopify.dev/api/storefront/latest/objects/model3d)."
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onError",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'error' event is triggered. Refer to [error in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-error).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onLoad",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the `load` event is triggered. Refer to [load in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-load).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPreload",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'preload' event is triggered. Refer to [preload in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-preload).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onModelVisibility",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'model-visibility' event is triggered. Refer to [model-visibility in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-modelVisibility).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onProgress",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'progress' event is triggered. Refer to [progress in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-progress).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onArStatus",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'ar-status' event is triggered. Refer to [ar-status in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-arStatus).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onArTracking",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'ar-tracking' event is triggered. Refer to [ar-tracking in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-arTracking).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onQuickLookButtonTapped",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'quick-look-button-tapped' event is triggered. Refer to [quick-look-button-tapped in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-quickLookButtonTapped).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onCameraChange",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'camera-change' event is triggered. Refer to [camera-change in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-stagingandcameras-events-cameraChange).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onEnvironmentChange",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'environment-change' event is triggered. Refer to [environment-change in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-lightingandenv-events-environmentChange).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPlay",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'play' event is triggered. Refer to [play in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-animation-events-play).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onPause",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'pause' event is triggered. Refer to [pause in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-animation-events-pause).",
                "isOptional": true
              },
              {
                "filePath": "/ModelViewer.tsx",
                "syntaxKind": "PropertySignature",
                "name": "onSceneGraphReady",
                "value": "(event: Event) => void",
                "description": "The callback to invoke when the 'scene-graph-ready' event is triggered. Refer to [scene-graph-ready in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-scenegraph-events-sceneGraphReady).",
                "isOptional": true
              }
            ]
          }
        }
      }
    ]
  },
  {
    "name": "money",
    "category": "components",
    "isVisualComponent": true,
    "related": [
      {
        "name": "useMoney",
        "type": "hook",
        "url": "api/hydrogen/hooks/primitive/usemoney"
      }
    ],
    "description": "The `Money` component renders a string of the Storefront API's[MoneyV2 object](https://shopify.dev/api/storefront/reference/common-objects/moneyv2) according to the `locale` in the [`ShopifyProvider` component](/api/hydrogen/components/global/shopifyprovider).\nThe component outputs a `<div>`. You can [customize this component](https://api/hydrogen/components#customizing-hydrogen-components) using passthrough props.",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "import {Money} from '@shopify/hydrogen-react';\n\nexport default function ProductMoney({product}) {\n  const price = product.variants.nodes[0].price;\n\n  return <Money data={price} />;\n}\n",
            "language": "jsx"
          },
          {
            "title": "TypeScript",
            "code": "import {Money} from '@shopify/hydrogen-react';\nimport type {Product} from '@shopify/hydrogen-react/storefront-api-types';\n\nexport default function ProductMoney({product}: {product: Product}) {\n  const price = product.variants.nodes[0].price;\n\n  return <Money data={price} />;\n}\n",
            "language": "tsx"
          }
        ],
        "title": "Example code"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "",
        "type": "MoneyProps",
        "typeDefinitions": {
          "MoneyProps": {
            "filePath": "/Money.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MoneyProps",
            "value": "CustomProps<ComponentGeneric> & Omit<\n      React.ComponentPropsWithoutRef<ComponentGeneric>,\n      keyof CustomProps<ComponentGeneric>\n    >",
            "description": ""
          },
          "CustomProps": {
            "filePath": "/Money.tsx",
            "name": "CustomProps",
            "description": "",
            "members": [
              {
                "filePath": "/Money.tsx",
                "syntaxKind": "PropertySignature",
                "name": "as",
                "value": "ComponentGeneric",
                "description": "An HTML tag or React Component to be rendered as the base element wrapper. The default is `div`.",
                "isOptional": true
              },
              {
                "filePath": "/Money.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<MoneyV2, { recurseIntoArrays: true; }>",
                "description": "An object with fields that correspond to the Storefront API's [MoneyV2 object](https://shopify.dev/api/storefront/reference/common-objects/moneyv2)."
              },
              {
                "filePath": "/Money.tsx",
                "syntaxKind": "PropertySignature",
                "name": "withoutCurrency",
                "value": "boolean",
                "description": "Whether to remove the currency symbol from the output.",
                "isOptional": true
              },
              {
                "filePath": "/Money.tsx",
                "syntaxKind": "PropertySignature",
                "name": "withoutTrailingZeros",
                "value": "boolean",
                "description": "Whether to remove trailing zeros (fractional money) from the output.",
                "isOptional": true
              },
              {
                "filePath": "/Money.tsx",
                "syntaxKind": "PropertySignature",
                "name": "measurement",
                "value": "PartialObjectDeep<UnitPriceMeasurement, { recurseIntoArrays: true; }>",
                "description": "A [UnitPriceMeasurement object](https://shopify.dev/api/storefront/latest/objects/unitpricemeasurement).",
                "isOptional": true
              },
              {
                "filePath": "/Money.tsx",
                "syntaxKind": "PropertySignature",
                "name": "measurementSeparator",
                "value": "ReactNode",
                "description": "Customizes the separator between the money output and the measurement output. Used with the `measurement` prop. Defaults to `'/'`.",
                "isOptional": true
              }
            ],
            "value": "interface CustomProps<ComponentGeneric extends React.ElementType> {\n  /** An HTML tag or React Component to be rendered as the base element wrapper. The default is `div`. */\n  as?: ComponentGeneric;\n  /** An object with fields that correspond to the Storefront API's [MoneyV2 object](https://shopify.dev/api/storefront/reference/common-objects/moneyv2). */\n  data: PartialDeep<MoneyV2, {recurseIntoArrays: true}>;\n  /** Whether to remove the currency symbol from the output. */\n  withoutCurrency?: boolean;\n  /** Whether to remove trailing zeros (fractional money) from the output. */\n  withoutTrailingZeros?: boolean;\n  /** A [UnitPriceMeasurement object](https://shopify.dev/api/storefront/latest/objects/unitpricemeasurement). */\n  measurement?: PartialDeep<UnitPriceMeasurement, {recurseIntoArrays: true}>;\n  /** Customizes the separator between the money output and the measurement output. Used with the `measurement` prop. Defaults to `'/'`. */\n  measurementSeparator?: ReactNode;\n}"
          }
        }
      }
    ]
  },
  {
    "name": "ProductPrice",
    "category": "components",
    "isVisualComponent": true,
    "related": [
      {
        "name": "ProductProvider",
        "type": "component",
        "url": "api/hydrogen/components/product-variant/productoptionsprovider"
      },
      {
        "name": "Money",
        "type": "component",
        "url": "api/hydrogen/components/primitive/money"
      }
    ],
    "description": "The `ProductPrice` component renders a `Money` component with the product [`priceRange`](https://shopify.dev/api/storefront/reference/products/productpricerange)'s `maxVariantPrice` or `minVariantPrice`, for either the regular price or compare at price range.",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "import {ProductPrice} from '@shopify/hydrogen-react';\n\nexport function ProductPricing({product}) {\n  return <ProductPrice data={product} priceType=\"compareAt\" valueType=\"max\" />;\n}\n",
            "language": "jsx"
          },
          {
            "title": "TypeScript",
            "code": "import {ProductPrice} from '@shopify/hydrogen-react';\nimport type {Product} from '@shopify/hydrogen-react/storefront-api-types';\n\nexport function ProductPricing({product}: {product: Product}) {\n  return <ProductPrice data={product} priceType=\"compareAt\" valueType=\"max\" />;\n}\n",
            "language": "tsx"
          }
        ],
        "title": "Example code"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "",
        "type": "ProductPriceProps",
        "typeDefinitions": {
          "ProductPriceProps": {
            "filePath": "/ProductPrice.tsx",
            "name": "ProductPriceProps",
            "description": "",
            "members": [
              {
                "filePath": "/ProductPrice.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<Product, { recurseIntoArrays: true; }>",
                "description": "A Storefront API [Product object](https://shopify.dev/api/storefront/reference/products/product)."
              },
              {
                "filePath": "/ProductPrice.tsx",
                "syntaxKind": "PropertySignature",
                "name": "priceType",
                "value": "\"regular\" | \"compareAt\"",
                "description": "The type of price. Valid values: `regular` (default) or `compareAt`.",
                "isOptional": true
              },
              {
                "filePath": "/ProductPrice.tsx",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"max\" | \"min\" | \"unit\"",
                "description": "The type of value. Valid values: `min` (default), `max` or `unit`.",
                "isOptional": true
              },
              {
                "filePath": "/ProductPrice.tsx",
                "syntaxKind": "PropertySignature",
                "name": "variantId",
                "value": "string",
                "description": "The ID of the variant.",
                "isOptional": true
              }
            ],
            "value": "export interface ProductPriceProps {\n  /** A Storefront API [Product object](https://shopify.dev/api/storefront/reference/products/product). */\n  data: PartialDeep<Product, {recurseIntoArrays: true}>;\n  /** The type of price. Valid values: `regular` (default) or `compareAt`. */\n  priceType?: 'regular' | 'compareAt';\n  /** The type of value. Valid values: `min` (default), `max` or `unit`. */\n  valueType?: 'max' | 'min' | 'unit';\n  /** The ID of the variant. */\n  variantId?: string;\n}"
          }
        }
      }
    ]
  },
  {
    "name": "ProductProvider",
    "category": "components",
    "isVisualComponent": true,
    "related": [
      {
        "name": "useProductOptions",
        "type": "hook",
        "url": "api/hydrogen/hooks/product-variant/useproductoptions"
      },
      {
        "name": "ProductPrice",
        "type": "component",
        "url": "api/hydrogen/components/product-variant/productprice"
      }
    ],
    "description": "`<ProductProvider />` is a context provider that enables use of the `useProduct()` hook. It helps manage selected options and variants for a product.",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "import {ProductProvider} from '@shopify/hydrogen-react';\n\nexport function Product({product}) {\n  return (\n    <ProductProvider data={product} initialVariantId=\"some-id\">\n      {/* Your JSX */}\n    </ProductProvider>\n  );\n}\n",
            "language": "jsx"
          },
          {
            "title": "TypeScript",
            "code": "import {ProductProvider} from '@shopify/hydrogen-react';\nimport type {Product} from '@shopify/hydrogen-react/storefront-api-types';\n\nexport function Product({product}: {product: Product}) {\n  return (\n    <ProductProvider data={product} initialVariantId=\"some-id\">\n      {/* Your JSX */}\n    </ProductProvider>\n  );\n}\n",
            "language": "tsx"
          }
        ],
        "title": "ProductProvider example"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "",
        "type": "ProductProviderProps",
        "typeDefinitions": {
          "ProductProviderProps": {
            "filePath": "/ProductProvider.tsx",
            "name": "ProductProviderProps",
            "description": "",
            "members": [
              {
                "filePath": "/ProductProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<Product, { recurseIntoArrays: true; }>",
                "description": "A Storefront API [Product object](https://shopify.dev/api/storefront/reference/products/product)."
              },
              {
                "filePath": "/ProductProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "children",
                "value": "ReactNode",
                "description": "A `ReactNode` element."
              },
              {
                "filePath": "/ProductProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "initialVariantId",
                "value": "string",
                "description": "The initially selected variant.\nThe following logic applies to `initialVariantId`:\n1. If `initialVariantId` is provided, then it's used even if it's out of stock.\n2. If `initialVariantId` is provided but is `null`, then no variant is used.\n3. If nothing is passed to `initialVariantId` then the first available / in-stock variant is used.\n4. If nothing is passed to `initialVariantId` and no variants are in stock, then the first variant is used.",
                "isOptional": true
              }
            ],
            "value": "interface ProductProviderProps {\n  /** A Storefront API [Product object](https://shopify.dev/api/storefront/reference/products/product). */\n  data: PartialDeep<Product, {recurseIntoArrays: true}>;\n  /** A `ReactNode` element. */\n  children: React.ReactNode;\n  /**\n   * The initially selected variant.\n   * The following logic applies to `initialVariantId`:\n   * 1. If `initialVariantId` is provided, then it's used even if it's out of stock.\n   * 2. If `initialVariantId` is provided but is `null`, then no variant is used.\n   * 3. If nothing is passed to `initialVariantId` then the first available / in-stock variant is used.\n   * 4. If nothing is passed to `initialVariantId` and no variants are in stock, then the first variant is used.\n   */\n  initialVariantId?: InitialVariantId;\n}"
          }
        }
      }
    ]
  },
  {
    "name": "ShopPayButton",
    "category": "components",
    "isVisualComponent": true,
    "related": [
      {
        "name": "CartShopPayButton",
        "type": "component",
        "url": "api/hydrogen/components/cart/cartshoppaybutton"
      }
    ],
    "description": "The `ShopPayButton` component renders a button that redirects to the Shop Pay checkout. You can [customize this component](https://shopify.dev/api/hydrogen/components#customizing-hydrogen-components) using passthrough props.",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "import {ShopPayButton} from '@shopify/hydrogen-react';\n\nexport function AddVariantQuantity1({variantId}) {\n  return <ShopPayButton variantIds={[variantId]} />;\n}\n\nexport function AddVariantQuantityMultiple({variantId, quantity}) {\n  return (\n    <ShopPayButton variantIdsAndQuantities={[{id: variantId, quantity}]} />\n  );\n}\n",
            "language": "jsx"
          },
          {
            "title": "TypeScript",
            "code": "import {ShopPayButton} from '@shopify/hydrogen-react';\n\nexport function AddVariantQuantity1({variantId}: {variantId: string}) {\n  return <ShopPayButton variantIds={[variantId]} />;\n}\n\nexport function AddVariantQuantityMultiple({\n  variantId,\n  quantity,\n}: {\n  variantId: string;\n  quantity: number;\n}) {\n  return (\n    <ShopPayButton variantIdsAndQuantities={[{id: variantId, quantity}]} />\n  );\n}\n",
            "language": "tsx"
          }
        ],
        "title": "Example code"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "interface description",
        "type": "ShopPayButtonProps",
        "typeDefinitions": {
          "ShopPayButtonProps": {
            "filePath": "/ShopPayButton.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopPayButtonProps",
            "value": "ShopPayButtonStyleProps & (ShopPayVariantIds | ShopPayVariantAndQuantities)",
            "description": ""
          },
          "ShopPayButtonStyleProps": {
            "filePath": "/ShopPayButton.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopPayButtonStyleProps",
            "value": "{\n  /** A string of classes to apply to the `div` that wraps the Shop Pay button. */\n  className?: string;\n  /** A string that's applied to the [CSS custom property (variable)](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) `--shop-pay-button-width` for the [Buy with Shop Pay component](https://shopify.dev/custom-storefronts/tools/web-components#buy-with-shop-pay-component). */\n  width?: string;\n}",
            "description": "",
            "members": [
              {
                "filePath": "/ShopPayButton.tsx",
                "syntaxKind": "PropertySignature",
                "name": "className",
                "value": "string",
                "description": "A string of classes to apply to the `div` that wraps the Shop Pay button.",
                "isOptional": true
              },
              {
                "filePath": "/ShopPayButton.tsx",
                "syntaxKind": "PropertySignature",
                "name": "width",
                "value": "string",
                "description": "A string that's applied to the [CSS custom property (variable)](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) `--shop-pay-button-width` for the [Buy with Shop Pay component](https://shopify.dev/custom-storefronts/tools/web-components#buy-with-shop-pay-component).",
                "isOptional": true
              }
            ]
          },
          "ShopPayVariantIds": {
            "filePath": "/ShopPayButton.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopPayVariantIds",
            "value": "{\n  /** An array of IDs of the variants to purchase with Shop Pay. This will only ever have a quantity of 1 for each variant. If you want to use other quantities, then use `variantIdsAndQuantities`. */\n  variantIds: string[];\n  /** An array of variant IDs and quantities to purchase with Shop Pay. */\n  variantIdsAndQuantities?: never;\n}",
            "description": "",
            "members": [
              {
                "filePath": "/ShopPayButton.tsx",
                "syntaxKind": "PropertySignature",
                "name": "variantIds",
                "value": "string[]",
                "description": "An array of IDs of the variants to purchase with Shop Pay. This will only ever have a quantity of 1 for each variant. If you want to use other quantities, then use `variantIdsAndQuantities`."
              },
              {
                "filePath": "/ShopPayButton.tsx",
                "syntaxKind": "PropertySignature",
                "name": "variantIdsAndQuantities",
                "value": "never",
                "description": "An array of variant IDs and quantities to purchase with Shop Pay.",
                "isOptional": true
              }
            ]
          },
          "ShopPayVariantAndQuantities": {
            "filePath": "/ShopPayButton.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopPayVariantAndQuantities",
            "value": "{\n  /** An array of IDs of the variants to purchase with Shop Pay. This will only ever have a quantity of 1 for each variant. If you want to use other quantities, then use `variantIdsAndQuantities`. */\n  variantIds?: never;\n  /** An array of variant IDs and quantities to purchase with Shop Pay. */\n  variantIdsAndQuantities: Array<{\n    id: string;\n    quantity: number;\n  }>;\n}",
            "description": "",
            "members": [
              {
                "filePath": "/ShopPayButton.tsx",
                "syntaxKind": "PropertySignature",
                "name": "variantIds",
                "value": "never",
                "description": "An array of IDs of the variants to purchase with Shop Pay. This will only ever have a quantity of 1 for each variant. If you want to use other quantities, then use `variantIdsAndQuantities`.",
                "isOptional": true
              },
              {
                "filePath": "/ShopPayButton.tsx",
                "syntaxKind": "PropertySignature",
                "name": "variantIdsAndQuantities",
                "value": "{ id: string; quantity: number; }[]",
                "description": "An array of variant IDs and quantities to purchase with Shop Pay."
              }
            ]
          }
        }
      }
    ]
  },
  {
    "name": "ShopifyProvider",
    "category": "components",
    "isVisualComponent": true,
    "related": [],
    "description": "The `ShopifyProvider` component wraps your entire app and provides functionality for many components, hooks, and utilities. The `ShopifyProvider` component also provides localization data for the app. You should place it in your app's entry point component.",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "import {ShopifyProvider} from '@shopify/hydrogen-react';\n\nexport default function App() {\n  return (\n    <ShopifyProvider\n      shopifyConfig={{\n        storeDomain: 'my-store',\n        storefrontToken: 'abc123',\n        storefrontApiVersion: '2022-10',\n      }}\n    >\n      {/* rest of your client-side app */}\n    </ShopifyProvider>\n  );\n}\n",
            "language": "jsx"
          },
          {
            "title": "TypeScript",
            "code": "import {ShopifyProvider} from '@shopify/hydrogen-react';\n\nexport default function App() {\n  return (\n    <ShopifyProvider\n      shopifyConfig={{\n        storeDomain: 'my-store',\n        storefrontToken: 'abc123',\n        storefrontApiVersion: '2022-10',\n      }}\n    >\n      {/* rest of your client-side app */}\n    </ShopifyProvider>\n  );\n}\n",
            "language": "tsx"
          }
        ],
        "title": "Example code"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "interface description",
        "type": "ShopifyProviderProps",
        "typeDefinitions": {
          "ShopifyProviderProps": {
            "filePath": "/ShopifyProvider.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopifyProviderProps",
            "value": "{\n  children: ReactNode;\n  shopifyConfig: ShopifyContextProps;\n}",
            "description": "",
            "members": [
              {
                "filePath": "/ShopifyProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "children",
                "value": "ReactNode",
                "description": ""
              },
              {
                "filePath": "/ShopifyProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "shopifyConfig",
                "value": "ShopifyContextProps",
                "description": ""
              }
            ]
          },
          "ShopifyContextProps": {
            "filePath": "/ShopifyProvider.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopifyContextProps",
            "value": "{\n  /** The globally-unique identifier for the Shop */\n  storefrontId?: string;\n  /** The subdomain of your Shopify storefront URL (eg: `{subdomain}.myshopify.com`). */\n  storeDomain: string;\n  /** The Storefront API public access token. Refer to the [authentication](https://shopify.dev/api/storefront#authentication) documentation for more details. */\n  storefrontToken: string;\n  /** The Storefront API version. This should almost always be the same as the version Hydrogen-UI was built for. Learn more about Shopify [API versioning](https://shopify.dev/api/usage/versioning) for more details.  */\n  storefrontApiVersion: string;\n  country?: ContextCountry;\n  language?: ContextLanguage;\n  /**\n   * The locale string based on `country` and `language`.\n   */\n  locale?: string;\n}",
            "description": "Shopify-specific values that are used in various Hydrogen-UI components and hooks.",
            "members": [
              {
                "filePath": "/ShopifyProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "storefrontId",
                "value": "string",
                "description": "The globally-unique identifier for the Shop",
                "isOptional": true
              },
              {
                "filePath": "/ShopifyProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "storeDomain",
                "value": "string",
                "description": "The subdomain of your Shopify storefront URL (eg: `{subdomain}.myshopify.com`)."
              },
              {
                "filePath": "/ShopifyProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "storefrontToken",
                "value": "string",
                "description": "The Storefront API public access token. Refer to the [authentication](https://shopify.dev/api/storefront#authentication) documentation for more details."
              },
              {
                "filePath": "/ShopifyProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "storefrontApiVersion",
                "value": "string",
                "description": "The Storefront API version. This should almost always be the same as the version Hydrogen-UI was built for. Learn more about Shopify [API versioning](https://shopify.dev/api/usage/versioning) for more details."
              },
              {
                "filePath": "/ShopifyProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "country",
                "value": "ContextCountry",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ShopifyProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "language",
                "value": "ContextLanguage",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/ShopifyProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "locale",
                "value": "string",
                "description": "The locale string based on `country` and `language`.",
                "isOptional": true
              }
            ]
          },
          "ContextCountry": {
            "filePath": "/ShopifyProvider.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ContextCountry",
            "value": "{\n  /**\n   * The code designating a country, which generally follows ISO 3166-1 alpha-2 guidelines. If a territory doesn't have a country code value in the `CountryCode` enum, it might be considered a subdivision of another country. For example, the territories associated with Spain are represented by the country code `ES`, and the territories associated with the United States of America are represented by the country code `US`.\n   */\n  isoCode: CountryCode;\n}",
            "description": "",
            "members": [
              {
                "filePath": "/ShopifyProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "CountryCode",
                "description": "The code designating a country, which generally follows ISO 3166-1 alpha-2 guidelines. If a territory doesn't have a country code value in the `CountryCode` enum, it might be considered a subdivision of another country. For example, the territories associated with Spain are represented by the country code `ES`, and the territories associated with the United States of America are represented by the country code `US`."
              }
            ]
          },
          "ContextLanguage": {
            "filePath": "/ShopifyProvider.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ContextLanguage",
            "value": "{\n  /**\n   * `ISO 369` language codes supported by Shopify.\n   */\n  isoCode: LanguageCode;\n}",
            "description": "",
            "members": [
              {
                "filePath": "/ShopifyProvider.tsx",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "LanguageCode",
                "description": "`ISO 369` language codes supported by Shopify."
              }
            ]
          }
        }
      }
    ]
  },
  {
    "name": "video",
    "category": "components",
    "isVisualComponent": true,
    "related": [
      {
        "name": "MediaFile",
        "type": "component",
        "url": "api/hydrogen/components/primitive/mediafile"
      },
      {
        "name": "Image",
        "type": "component",
        "url": "api/hydrogen/components/primitive/image"
      }
    ],
    "description": "The `Video` component renders a video for the Storefront API's [Video object](https://shopify.dev/api/storefront/reference/products/video).\nThe component outputs a `video` element. You can [customize this component](https://shopify.dev/api/hydrogen/components#customizing-hydrogen-components) using passthrough props.",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "import {Video} from '@shopify/hydrogen-react';\n\nexport default function MyProductVideo({products}) {\n  const firstMediaElement = products.edges[0].node.media.edges[0].node;\n\n  if (firstMediaElement.__typename === 'Video') {\n    return <Video data={firstMediaElement} />;\n  }\n}\n",
            "language": "jsx"
          },
          {
            "title": "TypeScript",
            "code": "import {Video} from '@shopify/hydrogen-react';\nimport type {ProductConnection} from '@shopify/hydrogen-react/storefront-api-types';\n\nexport default function MyProductVideo({\n  products,\n}: {\n  products: ProductConnection;\n}) {\n  const firstMediaElement = products.edges[0].node.media.edges[0].node;\n\n  if (firstMediaElement.__typename === 'Video') {\n    return <Video data={firstMediaElement} />;\n  }\n}\n",
            "language": "tsx"
          }
        ],
        "title": "Example code"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "",
        "type": "VideoProps",
        "typeDefinitions": {
          "VideoProps": {
            "filePath": "/Video.tsx",
            "name": "VideoProps",
            "description": "",
            "members": [
              {
                "filePath": "/Video.tsx",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "PartialObjectDeep<Video, { recurseIntoArrays: true; }>",
                "description": "An object with fields that correspond to the Storefront API's [Video object](https://shopify.dev/api/storefront/latest/objects/video)."
              },
              {
                "filePath": "/Video.tsx",
                "syntaxKind": "PropertySignature",
                "name": "previewImageOptions",
                "value": "Simplify<ShopifyLoaderOptions & ImageSrc>",
                "description": "An object of image size options for the video's `previewImage`. Uses `shopifyImageLoader` to generate the `poster` URL.",
                "isOptional": true
              },
              {
                "filePath": "/Video.tsx",
                "syntaxKind": "PropertySignature",
                "name": "sourceProps",
                "value": "HTMLAttributes<HTMLSourceElement> & { 'data-testid'?: string; }",
                "description": "Props that will be passed to the `video` element's `source` children elements.",
                "isOptional": true
              }
            ],
            "value": "export interface VideoProps {\n  /** An object with fields that correspond to the Storefront API's [Video object](https://shopify.dev/api/storefront/latest/objects/video). */\n  data: PartialDeep<VideoType, {recurseIntoArrays: true}>;\n  /** An object of image size options for the video's `previewImage`. Uses `shopifyImageLoader` to generate the `poster` URL. */\n  previewImageOptions?: Parameters<typeof shopifyImageLoader>[0];\n  /** Props that will be passed to the `video` element's `source` children elements. */\n  sourceProps?: HTMLAttributes<HTMLSourceElement> & {\n    'data-testid'?: string;\n  };\n}"
          },
          "ShopifyLoaderOptions": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShopifyLoaderOptions",
            "value": "{\n  crop?: 'top' | 'bottom' | 'left' | 'right' | 'center';\n  scale?: 2 | 3;\n  width?: HtmlImageProps['width'] | ImageType['width'];\n  height?: HtmlImageProps['height'] | ImageType['height'];\n}",
            "description": "",
            "members": [
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "crop",
                "value": "\"top\" | \"bottom\" | \"left\" | \"right\" | \"center\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "scale",
                "value": "3 | 2",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "width",
                "value": "string | number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "height",
                "value": "string | number",
                "description": "",
                "isOptional": true
              }
            ]
          },
          "ImageSrc": {
            "filePath": "/Image.tsx",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ImageSrc",
            "value": "{\n  src: ImageType['url'];\n}",
            "description": "",
            "members": [
              {
                "filePath": "/Image.tsx",
                "syntaxKind": "PropertySignature",
                "name": "src",
                "value": "string",
                "description": ""
              }
            ]
          }
        }
      }
    ]
  },
  {
    "name": "cart",
    "category": "hooks",
    "isVisualComponent": true,
    "related": [],
    "description": "",
    "type": "hook"
  }
]
